import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageTk 
import os
# Import c√°c h√†m CSDL c·∫ßn thi·∫øt
from Database.dbProducts import getProductDetailBySku, getProductsForPOS
from Database.dbOrders import createOrder, format_currency

class POSPage(tk.Frame):
    """Giao di·ªán ƒêi·ªÉm B√°n H√†ng (Point of Sale) ch√≠nh."""
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller

        # --- D·ªÆ LI·ªÜU V√Ä TR·∫†NG TH√ÅI ---
        self.current_user = None         # Th√¥ng tin user ƒë√£ ƒëƒÉng nh·∫≠p: {'id', 'username', 'role'}
        self.cart_items = {}             # Gi·ªè h√†ng: {sku: {sku, name, quantity, unitPrice}}
        self.current_sku = None          # SKU ƒëang ƒë∆∞·ª£c ch·ªçn tr√™n Treeview
        self.selected_product_is_available = False # C·ªù ki·ªÉm tra t·ªìn kho

        # --- KHUNG TR·∫†NG TH√ÅI USER & ƒêƒÇNG NH·∫¨P/ƒêƒÇNG XU·∫§T ---
        self.create_user_status_frame()
        
        # --- TI√äU ƒê·ªÄ CH√çNH ---
        tk.Label(self, text="TRANG B√ÅN H√ÄNG (POS)", font=("Arial", 20, "bold")).pack(pady=10)
        
        # --- KHUNG CH√çNH (Chia 2 c·ªôt) ---
        main_paned_window = ttk.PanedWindow(self, orient=tk.HORIZONTAL)
        main_paned_window.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Khung 1: Danh s√°ch S·∫£n ph·∫©m (Treeview)
        self.create_product_list_frame(main_paned_window)
        
        # Khung 2: Chi ti·∫øt S·∫£n ph·∫©m & Thao t√°c
        self.create_product_detail_frame(main_paned_window)

        # T·∫£i d·ªØ li·ªáu khi kh·ªüi t·∫°o
        self.load_products_list()

    # ----------------------------------------------------------------------
    # --- PH·∫¶N KH·ªûI T·∫†O GIAO DI·ªÜN CON ---
    # ----------------------------------------------------------------------

    def create_user_status_frame(self):
        """Kh·ªüi t·∫°o khung tr·∫°ng th√°i ng∆∞·ªùi d√πng (ƒêƒÉng nh·∫≠p/ƒêƒÉng xu·∫•t)."""
        status_frame = tk.Frame(self, relief=tk.RAISED, bd=1) 
        status_frame.pack(fill='x', padx=10, pady=5)

        self.user_label = tk.Label(status_frame, text="Ch∆∞a ƒëƒÉng nh·∫≠p", fg="red")
        self.user_label.pack(side=tk.LEFT, padx=10)

        self.login_button = tk.Button(status_frame, text="ƒêƒÉng nh·∫≠p", command=self.show_login_dialog)
        self.login_button.pack(side=tk.RIGHT, padx=10)

    def create_product_list_frame(self, parent_window):
        """Kh·ªüi t·∫°o Treeview hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m."""
        list_frame = tk.LabelFrame(parent_window, text="Danh s√°ch S·∫£n ph·∫©m")
        parent_window.add(list_frame, weight=1)
        
        columns = ("M√£ SP", "T√™n SP", "Gi√°") 
        self.tree = ttk.Treeview(list_frame, columns=columns, show="headings")
        self.tree.heading("M√£ SP", text="M√£ SP")
        self.tree.heading("T√™n SP", text="T√™n SP")
        self.tree.heading("Gi√°", text="Gi√°")
        
        self.tree.column("M√£ SP", width=80, anchor=tk.CENTER)
        self.tree.column("T√™n SP", width=200)
        self.tree.column("Gi√°", width=100, anchor=tk.E)
        
        self.tree.pack(fill='both', expand=True, padx=5, pady=5)
        self.tree.bind("<<TreeviewSelect>>", self.display_product_detail)

    def create_product_detail_frame(self, parent_window):
        """Kh·ªüi t·∫°o khung hi·ªÉn th·ªã chi ti·∫øt s·∫£n ph·∫©m, n√∫t Th√™m v√†o gi·ªè & Thanh to√°n."""
        self.detail_frame = tk.LabelFrame(parent_window, text="Chi ti·∫øt S·∫£n ph·∫©m", padx=10, pady=10)
        parent_window.add(self.detail_frame, weight=1)
        
        # 1. ·∫¢nh
        self.image_label = tk.Label(self.detail_frame, text="·∫¢nh S·∫£n ph·∫©m", width=30, height=15, relief="groove")
        self.image_label.pack(pady=10)
        self.photo = None 
        
        # 2. T√™n S·∫£n ph·∫©m
        tk.Label(self.detail_frame, text="T√™n SP:", font=("Arial", 10, "bold")).pack(anchor='w')
        self.name_label = tk.Label(self.detail_frame, text="...", anchor='w', font=("Arial", 14))
        self.name_label.pack(fill='x')
        
        # 3. Gi√°
        tk.Label(self.detail_frame, text="Gi√° B√°n:", font=("Arial", 10, "bold")).pack(anchor='w', pady=(5, 0))
        self.price_label = tk.Label(self.detail_frame, text="...", fg="red", font=("Arial", 18, "bold"), anchor='w')
        self.price_label.pack(fill='x')

        # 4. M√¥ t·∫£
        tk.Label(self.detail_frame, text="M√¥ t·∫£:", font=("Arial", 10, "bold")).pack(anchor='w', pady=(5, 0))
        scrollbar = ttk.Scrollbar(self.detail_frame)
        self.description_text = tk.Text(self.detail_frame, height=5, wrap='word', yscrollcommand=scrollbar.set) 
        scrollbar.config(command=self.description_text.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.description_text.pack(fill='x', expand=True)

        # 5. N√∫t Thao t√°c
        button_frame = tk.Frame(self.detail_frame)
        button_frame.pack(fill='x', pady=15)
        
        self.add_to_cart_button = tk.Button(button_frame, text="‚ûï Th√™m v√†o Gi·ªè", 
                                            command=self.add_to_cart, 
                                            bg="#2196F3", fg="white", font=("Arial", 12, "bold"))
        self.add_to_cart_button.pack(side=tk.LEFT, fill='x', expand=True, padx=(0, 5))
        
        self.checkout_button = tk.Button(button_frame, text="üõí Thanh to√°n", 
                                            command=self.show_checkout_dialog, 
                                            bg="#FF9800", fg="white", font=("Arial", 12, "bold"), state=tk.DISABLED) 
        self.checkout_button.pack(side=tk.RIGHT, fill='x', expand=True, padx=(5, 0))

    # ----------------------------------------------------------------------
    # --- X·ª¨ L√ù D·ªÆ LI·ªÜU & VIEW ---
    # ----------------------------------------------------------------------

    def load_products_list(self):
        """T·∫£i d·ªØ li·ªáu r√∫t g·ªçn v√†o Treeview."""
        for item in self.tree.get_children():
            self.tree.delete(item)
            
        products = getProductsForPOS()
        for product in products:
            sku, name, _, price_str, *_ = product 
            self.tree.insert('', tk.END, values=(sku, name, price_str), iid=sku) 

    def display_product_detail(self, event):
        """L·∫•y v√† hi·ªÉn th·ªã chi ti·∫øt s·∫£n ph·∫©m khi ch·ªçn tr√™n Treeview."""
        selected_sku = self.tree.focus()
        self.current_sku = selected_sku
        self.selected_product_is_available = False
        
        if selected_sku:
            product_data = getProductDetailBySku(selected_sku)
            
            if product_data:
                quantity = product_data.get('quantity', 0) 
                original_name = product_data['name']
                
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i t·ªìn kho
                if quantity <= 0:
                    display_name = f"{original_name} (H·∫æT H√ÄNG)"
                    self.name_label.config(text=display_name, fg="red") 
                    self.selected_product_is_available = False
                else:
                    display_name = original_name
                    self.name_label.config(text=display_name, fg="black") 
                    self.selected_product_is_available = True
                
                # Hi·ªÉn th·ªã Chi ti·∫øt
                self.price_label.config(text=product_data['price_str'])
                self.description_text.config(state=tk.NORMAL)
                self.description_text.delete('1.0', tk.END) 
                self.description_text.insert('1.0', product_data['description'])
                self.description_text.config(state=tk.DISABLED) 
                
                # Hi·ªÉn th·ªã ·∫¢nh
                self.load_image(product_data['imagePath'])
            else:
                self.clear_detail_view()
                self.selected_product_is_available = False
        
    def load_image(self, imagePath):
        """T·∫£i v√† hi·ªÉn th·ªã ·∫£nh (Resize 141x250)."""
        self.clear_image()
        
        if imagePath:
            absolute_path = os.path.join(os.getcwd(), imagePath)
        else:
            absolute_path = None
        
        if absolute_path and os.path.exists(absolute_path):
            try:
                img = Image.open(absolute_path)
                w, h = 141, 250 
                img = img.resize((w, h), Image.Resampling.LANCZOS)
                self.photo = ImageTk.PhotoImage(img) 
                self.image_label.config(image=self.photo, text="", width=w, height=h)
            except Exception as e:
                print(f"L·ªói t·∫£i ·∫£nh (PIL): {e}")
                self.image_label.config(image='', text="Kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh")
        else:
            self.image_label.config(image='', text="Kh√¥ng c√≥ ·∫£nh/·∫¢nh l·ªói")
            
    def clear_detail_view(self):
        """X√≥a n·ªôi dung khung chi ti·∫øt."""
        self.name_label.config(text="...")
        self.price_label.config(text="...")
        self.description_text.config(state=tk.NORMAL)
        self.description_text.delete('1.0', tk.END)
        self.clear_image()
        
    def clear_image(self):
        """X√≥a ·∫£nh v√† gi·∫£i ph√≥ng tham chi·∫øu."""
        self.image_label.config(image='', text="·∫¢nh S·∫£n ph·∫©m", width=30, height=15)
        self.photo = None


    # ----------------------------------------------------------------------
    # --- X·ª¨ L√ù T√ÄI KHO·∫¢N & ƒêƒÇNG NH·∫¨P ---
    # ----------------------------------------------------------------------
    
    def show_login_dialog(self):
        """Chuy·ªÉn ƒë·∫øn trang ƒêƒÉng nh·∫≠p ho·∫∑c ƒêƒÉng xu·∫•t."""
        if self.current_user:
            self.logout()
            return
        self.controller.show_frame("LoginPage")

    def logout(self):
        """X√≥a user, reset gi·ªè h√†ng, v√† c·∫≠p nh·∫≠t giao di·ªán."""
        self.current_user = None
        self.user_label.config(text="Ch∆∞a ƒëƒÉng nh·∫≠p", fg="red")
        self.login_button.config(text="ƒêƒÉng nh·∫≠p")
        self.cart_items = {}
        self.checkout_button.config(state=tk.DISABLED)
        self.controller.show_frame("POSPage")
    
    def update_user_status(self, user_id, username, role):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i user sau khi ƒëƒÉng nh·∫≠p."""
        self.current_user = {'id': user_id, 'username': username, 'role': role}
        self.user_label.config(text=f"Xin ch√†o: {username} ({role})", fg="green")
        self.login_button.config(text="ƒêƒÉng xu·∫•t")
        
        # Ph√¢n quy·ªÅn & ƒêi·ªÅu h∆∞·ªõng
        if role == 'Admin':
            self.controller.show_frame("AdminPage")
        # 'User' ho·∫∑c 'Guest' gi·ªØ nguy√™n tr√™n trang POS

    # ----------------------------------------------------------------------
    # --- X·ª¨ L√ù GI·ªé H√ÄNG & THANH TO√ÅN ---
    # ----------------------------------------------------------------------

    def add_to_cart(self):
        """Th√™m s·∫£n ph·∫©m ƒëang ch·ªçn v√†o gi·ªè h√†ng."""
        if not self.current_user:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.")
            return

        selected_sku = self.current_sku or self.tree.focus()
        if not selected_sku:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt s·∫£n ph·∫©m tr∆∞·ªõc.")
            return

        if not self.selected_product_is_available:
            messagebox.showerror("L·ªói T·ªìn kho", "S·∫£n ph·∫©m n√†y ƒë√£ h·∫øt h√†ng.")
            return
            
        product_data = getProductDetailBySku(selected_sku)
        if not product_data:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y chi ti·∫øt s·∫£n ph·∫©m.")
            return

        name = product_data['name']
        price = product_data['price'] # Gi√° tr·ªã s·ªë
        
        if selected_sku in self.cart_items:
            # TƒÉng s·ªë l∆∞·ª£ng & ki·ªÉm tra gi·ªõi h·∫°n t·ªìn kho
            current_available_stock = product_data['quantity']
            if self.cart_items[selected_sku]['quantity'] >= current_available_stock:
                 messagebox.showwarning("L·ªói t·ªìn kho", f"ƒê√£ ƒë·∫°t gi·ªõi h·∫°n t·ªìn kho ({current_available_stock}).")
                 return
                 
            self.cart_items[selected_sku]['quantity'] += 1
            message = f"ƒê√£ tƒÉng SL '{name}' l√™n {self.cart_items[selected_sku]['quantity']}."
        else:
            # Th√™m m·ªõi (SL = 1)
            self.cart_items[selected_sku] = {
                'sku': selected_sku,
                'name': name,
                'quantity': 1,
                'unitPrice': price
            }
            message = f"ƒê√£ th√™m '{name}' v√†o gi·ªè h√†ng (SL: 1)."
            
        messagebox.showinfo("Th√†nh c√¥ng", message)
        self.checkout_button.config(state=tk.NORMAL if self.cart_items else tk.DISABLED)


    def show_checkout_dialog(self):
        """Hi·ªÉn th·ªã pop-up x√°c nh·∫≠n thanh to√°n v·ªõi chi ti·∫øt gi·ªè h√†ng."""
        if not self.cart_items:
            messagebox.showwarning("C·∫£nh b√°o", "Gi·ªè h√†ng tr·ªëng.")
            return
        
        checkout_window = tk.Toplevel(self)
        checkout_window.title("X√°c nh·∫≠n Thanh to√°n")
        checkout_window.grab_set()

        cart_frame = tk.LabelFrame(checkout_window, text="Chi ti·∫øt Gi·ªè h√†ng", padx=10, pady=10)
        cart_frame.pack(padx=20, pady=10, fill='both', expand=True)

        # Treeview
        cart_tree = ttk.Treeview(cart_frame, columns=("T√™n SP", "SL", "ƒê∆°n gi√°", "T·ªïng"), show="headings")
        cart_tree.heading("T√™n SP", text="T√™n SP")
        cart_tree.heading("SL", text="SL", anchor=tk.CENTER)
        cart_tree.heading("ƒê∆°n gi√°", text="ƒê∆°n gi√°", anchor=tk.E)
        cart_tree.heading("T·ªïng", text="T·ªïng", anchor=tk.E)
        cart_tree.column("SL", width=50, anchor=tk.CENTER)
        cart_tree.column("ƒê∆°n gi√°", width=100, anchor=tk.E)
        cart_tree.column("T·ªïng", width=100, anchor=tk.E)
        cart_tree.pack(fill='both', expand=True)
        
        total_amount = 0

        # ƒêi·ªÅn d·ªØ li·ªáu
        for item in self.cart_items.values():
            # S·ª≠ d·ª•ng float cho t√≠nh to√°n r·ªìi d√πng format_currency cho hi·ªÉn th·ªã
            item_total = item['quantity'] * float(item['unitPrice']) 
            total_amount += item_total
            cart_tree.insert('', tk.END, values=(
                item['name'], 
                item['quantity'], 
                format_currency(item['unitPrice']),
                format_currency(item_total)
            ))

        # Khung t·ªïng ti·ªÅn
        total_frame = tk.Frame(checkout_window)
        total_frame.pack(fill='x', padx=20, pady=(0, 10))
        tk.Label(total_frame, text="T·ªîNG THANH TO√ÅN:", font=("Arial", 14, "bold")).pack(side=tk.LEFT)
        tk.Label(total_frame, 
                 text=f"{format_currency(total_amount)} VNƒê", 
                 fg="red", 
                 font=("Arial", 16, "bold")).pack(side=tk.RIGHT)
        
        # N√∫t x√°c nh·∫≠n
        confirm_button = tk.Button(checkout_window, text="X√ÅC NH·∫¨N THANH TO√ÅN", 
                                   command=lambda: self.process_order(checkout_window, total_amount),
                                   bg="#4CAF50", fg="white", font=("Arial", 12, "bold"))
        confirm_button.pack(fill='x', padx=20, pady=(0, 15))


    def process_order(self, checkout_window, total_amount):
        """Th·ª±c hi·ªán g·ªçi h√†m t·∫°o ƒë∆°n h√†ng (createOrder) v√† x·ª≠ l√Ω k·∫øt qu·∫£."""
        
        # 1. Chu·∫©n b·ªã d·ªØ li·ªáu
        items_for_db = list(self.cart_items.values())
        if not self.current_user or 'id' not in self.current_user or self.current_user['id'] is None:
            checkout_window.destroy()
            messagebox.showerror("L·ªói", "Th√¥ng tin ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.")
            return
        user_id = self.current_user['id']
        
        # ƒê√≥ng c·ª≠a s·ªï pop-up ngay tr∆∞·ªõc khi g·ªçi CSDL
        checkout_window.destroy()

        # 2. G·ªçi h√†m t·∫°o ƒë∆°n h√†ng
        success, result = createOrder(user_id, items_for_db)

        # 3. X·ª≠ l√Ω k·∫øt qu·∫£
        if success:
            order_id = result # result l√† orderID
            messagebox.showinfo("Th√†nh c√¥ng", f"Thanh to√°n th√†nh c√¥ng!\nT·ªïng ti·ªÅn: {format_currency(total_amount)} VNƒê\nM√£ ƒê∆°n h√†ng: {order_id}")
            
            # Reset giao di·ªán
            self.cart_items = {}
            self.checkout_button.config(state=tk.DISABLED)
            self.load_products_list()
            self.clear_detail_view()
        else:
            # result l√† error_message
            messagebox.showerror("L·ªói Thanh to√°n", f"Th·∫•t b·∫°i khi t·∫°o ƒë∆°n h√†ng/tr·ª´ t·ªìn kho: \n{result}")